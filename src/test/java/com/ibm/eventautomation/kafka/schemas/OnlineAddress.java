/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.eventautomation.kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OnlineAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -407837523651953640L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OnlineAddress\",\"namespace\":\"com.ibm.eventautomation.kafka.schemas\",\"fields\":[{\"name\":\"shippingaddress\",\"type\":{\"type\":\"record\",\"name\":\"ShippingAddress\",\"fields\":[{\"name\":\"number\",\"type\":[\"null\",\"int\"],\"doc\":\"House number for the shipping address\"},{\"name\":\"street\",\"type\":[\"null\",\"string\"],\"doc\":\"Street for the shipping address\"},{\"name\":\"city\",\"type\":\"string\",\"doc\":\"City for the shipping address\"},{\"name\":\"zipcode\",\"type\":\"string\",\"doc\":\"Zipcode for the shipping address\"},{\"name\":\"country\",\"type\":{\"type\":\"record\",\"name\":\"ShippingCountry\",\"fields\":[{\"name\":\"code\",\"type\":\"string\",\"doc\":\"Two-letter country code\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the country\"}]},\"doc\":\"Country for the shipping address\"},{\"name\":\"phones\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Phone numbers for the shipping address\"}]},\"doc\":\"Shipping address used for the online order\"},{\"name\":\"billingaddress\",\"type\":{\"type\":\"record\",\"name\":\"BillingAddress\",\"fields\":[{\"name\":\"number\",\"type\":[\"null\",\"int\"],\"doc\":\"House number for the billing address\"},{\"name\":\"street\",\"type\":[\"null\",\"string\"],\"doc\":\"Street for the billing address\"},{\"name\":\"city\",\"type\":\"string\",\"doc\":\"City for the billing address\"},{\"name\":\"zipcode\",\"type\":\"string\",\"doc\":\"Zipcode for the billing address\"},{\"name\":\"country\",\"type\":{\"type\":\"record\",\"name\":\"BillingCountry\",\"fields\":[{\"name\":\"code\",\"type\":\"string\",\"doc\":\"Two-letter country code\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the country\"}]},\"doc\":\"Country for the billing address\"},{\"name\":\"phones\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Phone numbers for the billing address\"}]},\"doc\":\"Billing address used for the online order\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OnlineAddress> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OnlineAddress> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OnlineAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OnlineAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OnlineAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OnlineAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OnlineAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OnlineAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OnlineAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Shipping address used for the online order */
  private com.ibm.eventautomation.kafka.schemas.ShippingAddress shippingaddress;
  /** Billing address used for the online order */
  private com.ibm.eventautomation.kafka.schemas.BillingAddress billingaddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OnlineAddress() {}

  /**
   * All-args constructor.
   * @param shippingaddress Shipping address used for the online order
   * @param billingaddress Billing address used for the online order
   */
  public OnlineAddress(com.ibm.eventautomation.kafka.schemas.ShippingAddress shippingaddress, com.ibm.eventautomation.kafka.schemas.BillingAddress billingaddress) {
    this.shippingaddress = shippingaddress;
    this.billingaddress = billingaddress;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return shippingaddress;
    case 1: return billingaddress;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: shippingaddress = (com.ibm.eventautomation.kafka.schemas.ShippingAddress)value$; break;
    case 1: billingaddress = (com.ibm.eventautomation.kafka.schemas.BillingAddress)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'shippingaddress' field.
   * @return Shipping address used for the online order
   */
  public com.ibm.eventautomation.kafka.schemas.ShippingAddress getShippingaddress() {
    return shippingaddress;
  }


  /**
   * Sets the value of the 'shippingaddress' field.
   * Shipping address used for the online order
   * @param value the value to set.
   */
  public void setShippingaddress(com.ibm.eventautomation.kafka.schemas.ShippingAddress value) {
    this.shippingaddress = value;
  }

  /**
   * Gets the value of the 'billingaddress' field.
   * @return Billing address used for the online order
   */
  public com.ibm.eventautomation.kafka.schemas.BillingAddress getBillingaddress() {
    return billingaddress;
  }


  /**
   * Sets the value of the 'billingaddress' field.
   * Billing address used for the online order
   * @param value the value to set.
   */
  public void setBillingaddress(com.ibm.eventautomation.kafka.schemas.BillingAddress value) {
    this.billingaddress = value;
  }

  /**
   * Creates a new OnlineAddress RecordBuilder.
   * @return A new OnlineAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder newBuilder() {
    return new com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder();
  }

  /**
   * Creates a new OnlineAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OnlineAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder(other);
    }
  }

  /**
   * Creates a new OnlineAddress RecordBuilder by copying an existing OnlineAddress instance.
   * @param other The existing instance to copy.
   * @return A new OnlineAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.OnlineAddress other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for OnlineAddress instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OnlineAddress>
    implements org.apache.avro.data.RecordBuilder<OnlineAddress> {

    /** Shipping address used for the online order */
    private com.ibm.eventautomation.kafka.schemas.ShippingAddress shippingaddress;
    private com.ibm.eventautomation.kafka.schemas.ShippingAddress.Builder shippingaddressBuilder;
    /** Billing address used for the online order */
    private com.ibm.eventautomation.kafka.schemas.BillingAddress billingaddress;
    private com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder billingaddressBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.shippingaddress)) {
        this.shippingaddress = data().deepCopy(fields()[0].schema(), other.shippingaddress);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasShippingaddressBuilder()) {
        this.shippingaddressBuilder = com.ibm.eventautomation.kafka.schemas.ShippingAddress.newBuilder(other.getShippingaddressBuilder());
      }
      if (isValidValue(fields()[1], other.billingaddress)) {
        this.billingaddress = data().deepCopy(fields()[1].schema(), other.billingaddress);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasBillingaddressBuilder()) {
        this.billingaddressBuilder = com.ibm.eventautomation.kafka.schemas.BillingAddress.newBuilder(other.getBillingaddressBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing OnlineAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.OnlineAddress other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.shippingaddress)) {
        this.shippingaddress = data().deepCopy(fields()[0].schema(), other.shippingaddress);
        fieldSetFlags()[0] = true;
      }
      this.shippingaddressBuilder = null;
      if (isValidValue(fields()[1], other.billingaddress)) {
        this.billingaddress = data().deepCopy(fields()[1].schema(), other.billingaddress);
        fieldSetFlags()[1] = true;
      }
      this.billingaddressBuilder = null;
    }

    /**
      * Gets the value of the 'shippingaddress' field.
      * Shipping address used for the online order
      * @return The value.
      */
    public com.ibm.eventautomation.kafka.schemas.ShippingAddress getShippingaddress() {
      return shippingaddress;
    }


    /**
      * Sets the value of the 'shippingaddress' field.
      * Shipping address used for the online order
      * @param value The value of 'shippingaddress'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder setShippingaddress(com.ibm.eventautomation.kafka.schemas.ShippingAddress value) {
      validate(fields()[0], value);
      this.shippingaddressBuilder = null;
      this.shippingaddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'shippingaddress' field has been set.
      * Shipping address used for the online order
      * @return True if the 'shippingaddress' field has been set, false otherwise.
      */
    public boolean hasShippingaddress() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'shippingaddress' field and creates one if it doesn't exist yet.
     * Shipping address used for the online order
     * @return This builder.
     */
    public com.ibm.eventautomation.kafka.schemas.ShippingAddress.Builder getShippingaddressBuilder() {
      if (shippingaddressBuilder == null) {
        if (hasShippingaddress()) {
          setShippingaddressBuilder(com.ibm.eventautomation.kafka.schemas.ShippingAddress.newBuilder(shippingaddress));
        } else {
          setShippingaddressBuilder(com.ibm.eventautomation.kafka.schemas.ShippingAddress.newBuilder());
        }
      }
      return shippingaddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'shippingaddress' field
     * Shipping address used for the online order
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder setShippingaddressBuilder(com.ibm.eventautomation.kafka.schemas.ShippingAddress.Builder value) {
      clearShippingaddress();
      shippingaddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'shippingaddress' field has an active Builder instance
     * Shipping address used for the online order
     * @return True if the 'shippingaddress' field has an active Builder instance
     */
    public boolean hasShippingaddressBuilder() {
      return shippingaddressBuilder != null;
    }

    /**
      * Clears the value of the 'shippingaddress' field.
      * Shipping address used for the online order
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder clearShippingaddress() {
      shippingaddress = null;
      shippingaddressBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'billingaddress' field.
      * Billing address used for the online order
      * @return The value.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress getBillingaddress() {
      return billingaddress;
    }


    /**
      * Sets the value of the 'billingaddress' field.
      * Billing address used for the online order
      * @param value The value of 'billingaddress'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder setBillingaddress(com.ibm.eventautomation.kafka.schemas.BillingAddress value) {
      validate(fields()[1], value);
      this.billingaddressBuilder = null;
      this.billingaddress = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'billingaddress' field has been set.
      * Billing address used for the online order
      * @return True if the 'billingaddress' field has been set, false otherwise.
      */
    public boolean hasBillingaddress() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'billingaddress' field and creates one if it doesn't exist yet.
     * Billing address used for the online order
     * @return This builder.
     */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder getBillingaddressBuilder() {
      if (billingaddressBuilder == null) {
        if (hasBillingaddress()) {
          setBillingaddressBuilder(com.ibm.eventautomation.kafka.schemas.BillingAddress.newBuilder(billingaddress));
        } else {
          setBillingaddressBuilder(com.ibm.eventautomation.kafka.schemas.BillingAddress.newBuilder());
        }
      }
      return billingaddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'billingaddress' field
     * Billing address used for the online order
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder setBillingaddressBuilder(com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder value) {
      clearBillingaddress();
      billingaddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'billingaddress' field has an active Builder instance
     * Billing address used for the online order
     * @return True if the 'billingaddress' field has an active Builder instance
     */
    public boolean hasBillingaddressBuilder() {
      return billingaddressBuilder != null;
    }

    /**
      * Clears the value of the 'billingaddress' field.
      * Billing address used for the online order
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.OnlineAddress.Builder clearBillingaddress() {
      billingaddress = null;
      billingaddressBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OnlineAddress build() {
      try {
        OnlineAddress record = new OnlineAddress();
        if (shippingaddressBuilder != null) {
          try {
            record.shippingaddress = this.shippingaddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("shippingaddress"));
            throw e;
          }
        } else {
          record.shippingaddress = fieldSetFlags()[0] ? this.shippingaddress : (com.ibm.eventautomation.kafka.schemas.ShippingAddress) defaultValue(fields()[0]);
        }
        if (billingaddressBuilder != null) {
          try {
            record.billingaddress = this.billingaddressBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("billingaddress"));
            throw e;
          }
        } else {
          record.billingaddress = fieldSetFlags()[1] ? this.billingaddress : (com.ibm.eventautomation.kafka.schemas.BillingAddress) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OnlineAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<OnlineAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OnlineAddress>
    READER$ = (org.apache.avro.io.DatumReader<OnlineAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.shippingaddress.customEncode(out);

    this.billingaddress.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.shippingaddress == null) {
        this.shippingaddress = new com.ibm.eventautomation.kafka.schemas.ShippingAddress();
      }
      this.shippingaddress.customDecode(in);

      if (this.billingaddress == null) {
        this.billingaddress = new com.ibm.eventautomation.kafka.schemas.BillingAddress();
      }
      this.billingaddress.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.shippingaddress == null) {
            this.shippingaddress = new com.ibm.eventautomation.kafka.schemas.ShippingAddress();
          }
          this.shippingaddress.customDecode(in);
          break;

        case 1:
          if (this.billingaddress == null) {
            this.billingaddress = new com.ibm.eventautomation.kafka.schemas.BillingAddress();
          }
          this.billingaddress.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










