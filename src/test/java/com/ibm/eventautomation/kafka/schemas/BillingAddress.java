/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.eventautomation.kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BillingAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1512649753204220020L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BillingAddress\",\"namespace\":\"com.ibm.eventautomation.kafka.schemas\",\"fields\":[{\"name\":\"number\",\"type\":[\"null\",\"int\"],\"doc\":\"House number for the billing address\"},{\"name\":\"street\",\"type\":[\"null\",\"string\"],\"doc\":\"Street for the billing address\"},{\"name\":\"city\",\"type\":\"string\",\"doc\":\"City for the billing address\"},{\"name\":\"zipcode\",\"type\":\"string\",\"doc\":\"Zipcode for the billing address\"},{\"name\":\"country\",\"type\":{\"type\":\"record\",\"name\":\"BillingCountry\",\"fields\":[{\"name\":\"code\",\"type\":\"string\",\"doc\":\"Two-letter country code\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the country\"}]},\"doc\":\"Country for the billing address\"},{\"name\":\"phones\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Phone numbers for the billing address\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BillingAddress> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BillingAddress> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BillingAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BillingAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BillingAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BillingAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BillingAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BillingAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BillingAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** House number for the billing address */
  private java.lang.Integer number;
  /** Street for the billing address */
  private java.lang.CharSequence street;
  /** City for the billing address */
  private java.lang.CharSequence city;
  /** Zipcode for the billing address */
  private java.lang.CharSequence zipcode;
  /** Country for the billing address */
  private com.ibm.eventautomation.kafka.schemas.BillingCountry country;
  /** Phone numbers for the billing address */
  private java.util.List<java.lang.CharSequence> phones;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BillingAddress() {}

  /**
   * All-args constructor.
   * @param number House number for the billing address
   * @param street Street for the billing address
   * @param city City for the billing address
   * @param zipcode Zipcode for the billing address
   * @param country Country for the billing address
   * @param phones Phone numbers for the billing address
   */
  public BillingAddress(java.lang.Integer number, java.lang.CharSequence street, java.lang.CharSequence city, java.lang.CharSequence zipcode, com.ibm.eventautomation.kafka.schemas.BillingCountry country, java.util.List<java.lang.CharSequence> phones) {
    this.number = number;
    this.street = street;
    this.city = city;
    this.zipcode = zipcode;
    this.country = country;
    this.phones = phones;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return number;
    case 1: return street;
    case 2: return city;
    case 3: return zipcode;
    case 4: return country;
    case 5: return phones;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: number = (java.lang.Integer)value$; break;
    case 1: street = (java.lang.CharSequence)value$; break;
    case 2: city = (java.lang.CharSequence)value$; break;
    case 3: zipcode = (java.lang.CharSequence)value$; break;
    case 4: country = (com.ibm.eventautomation.kafka.schemas.BillingCountry)value$; break;
    case 5: phones = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return House number for the billing address
   */
  public java.lang.Integer getNumber() {
    return number;
  }


  /**
   * Sets the value of the 'number' field.
   * House number for the billing address
   * @param value the value to set.
   */
  public void setNumber(java.lang.Integer value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return Street for the billing address
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }


  /**
   * Sets the value of the 'street' field.
   * Street for the billing address
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return City for the billing address
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * City for the billing address
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'zipcode' field.
   * @return Zipcode for the billing address
   */
  public java.lang.CharSequence getZipcode() {
    return zipcode;
  }


  /**
   * Sets the value of the 'zipcode' field.
   * Zipcode for the billing address
   * @param value the value to set.
   */
  public void setZipcode(java.lang.CharSequence value) {
    this.zipcode = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return Country for the billing address
   */
  public com.ibm.eventautomation.kafka.schemas.BillingCountry getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * Country for the billing address
   * @param value the value to set.
   */
  public void setCountry(com.ibm.eventautomation.kafka.schemas.BillingCountry value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'phones' field.
   * @return Phone numbers for the billing address
   */
  public java.util.List<java.lang.CharSequence> getPhones() {
    return phones;
  }


  /**
   * Sets the value of the 'phones' field.
   * Phone numbers for the billing address
   * @param value the value to set.
   */
  public void setPhones(java.util.List<java.lang.CharSequence> value) {
    this.phones = value;
  }

  /**
   * Creates a new BillingAddress RecordBuilder.
   * @return A new BillingAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder newBuilder() {
    return new com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder();
  }

  /**
   * Creates a new BillingAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BillingAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder(other);
    }
  }

  /**
   * Creates a new BillingAddress RecordBuilder by copying an existing BillingAddress instance.
   * @param other The existing instance to copy.
   * @return A new BillingAddress RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.BillingAddress other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for BillingAddress instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BillingAddress>
    implements org.apache.avro.data.RecordBuilder<BillingAddress> {

    /** House number for the billing address */
    private java.lang.Integer number;
    /** Street for the billing address */
    private java.lang.CharSequence street;
    /** City for the billing address */
    private java.lang.CharSequence city;
    /** Zipcode for the billing address */
    private java.lang.CharSequence zipcode;
    /** Country for the billing address */
    private com.ibm.eventautomation.kafka.schemas.BillingCountry country;
    private com.ibm.eventautomation.kafka.schemas.BillingCountry.Builder countryBuilder;
    /** Phone numbers for the billing address */
    private java.util.List<java.lang.CharSequence> phones;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.street)) {
        this.street = data().deepCopy(fields()[1].schema(), other.street);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasCountryBuilder()) {
        this.countryBuilder = com.ibm.eventautomation.kafka.schemas.BillingCountry.newBuilder(other.getCountryBuilder());
      }
      if (isValidValue(fields()[5], other.phones)) {
        this.phones = data().deepCopy(fields()[5].schema(), other.phones);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing BillingAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.BillingAddress other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.street)) {
        this.street = data().deepCopy(fields()[1].schema(), other.street);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      this.countryBuilder = null;
      if (isValidValue(fields()[5], other.phones)) {
        this.phones = data().deepCopy(fields()[5].schema(), other.phones);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'number' field.
      * House number for the billing address
      * @return The value.
      */
    public java.lang.Integer getNumber() {
      return number;
    }


    /**
      * Sets the value of the 'number' field.
      * House number for the billing address
      * @param value The value of 'number'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setNumber(java.lang.Integer value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * House number for the billing address
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'number' field.
      * House number for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * Street for the billing address
      * @return The value.
      */
    public java.lang.CharSequence getStreet() {
      return street;
    }


    /**
      * Sets the value of the 'street' field.
      * Street for the billing address
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.street = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * Street for the billing address
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'street' field.
      * Street for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearStreet() {
      street = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * City for the billing address
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * City for the billing address
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * City for the billing address
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * City for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'zipcode' field.
      * Zipcode for the billing address
      * @return The value.
      */
    public java.lang.CharSequence getZipcode() {
      return zipcode;
    }


    /**
      * Sets the value of the 'zipcode' field.
      * Zipcode for the billing address
      * @param value The value of 'zipcode'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setZipcode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.zipcode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'zipcode' field has been set.
      * Zipcode for the billing address
      * @return True if the 'zipcode' field has been set, false otherwise.
      */
    public boolean hasZipcode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'zipcode' field.
      * Zipcode for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearZipcode() {
      zipcode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * Country for the billing address
      * @return The value.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingCountry getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * Country for the billing address
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setCountry(com.ibm.eventautomation.kafka.schemas.BillingCountry value) {
      validate(fields()[4], value);
      this.countryBuilder = null;
      this.country = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * Country for the billing address
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'country' field and creates one if it doesn't exist yet.
     * Country for the billing address
     * @return This builder.
     */
    public com.ibm.eventautomation.kafka.schemas.BillingCountry.Builder getCountryBuilder() {
      if (countryBuilder == null) {
        if (hasCountry()) {
          setCountryBuilder(com.ibm.eventautomation.kafka.schemas.BillingCountry.newBuilder(country));
        } else {
          setCountryBuilder(com.ibm.eventautomation.kafka.schemas.BillingCountry.newBuilder());
        }
      }
      return countryBuilder;
    }

    /**
     * Sets the Builder instance for the 'country' field
     * Country for the billing address
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setCountryBuilder(com.ibm.eventautomation.kafka.schemas.BillingCountry.Builder value) {
      clearCountry();
      countryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'country' field has an active Builder instance
     * Country for the billing address
     * @return True if the 'country' field has an active Builder instance
     */
    public boolean hasCountryBuilder() {
      return countryBuilder != null;
    }

    /**
      * Clears the value of the 'country' field.
      * Country for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearCountry() {
      country = null;
      countryBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'phones' field.
      * Phone numbers for the billing address
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPhones() {
      return phones;
    }


    /**
      * Sets the value of the 'phones' field.
      * Phone numbers for the billing address
      * @param value The value of 'phones'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder setPhones(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.phones = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'phones' field has been set.
      * Phone numbers for the billing address
      * @return True if the 'phones' field has been set, false otherwise.
      */
    public boolean hasPhones() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'phones' field.
      * Phone numbers for the billing address
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.BillingAddress.Builder clearPhones() {
      phones = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BillingAddress build() {
      try {
        BillingAddress record = new BillingAddress();
        record.number = fieldSetFlags()[0] ? this.number : (java.lang.Integer) defaultValue(fields()[0]);
        record.street = fieldSetFlags()[1] ? this.street : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.zipcode = fieldSetFlags()[3] ? this.zipcode : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (countryBuilder != null) {
          try {
            record.country = this.countryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("country"));
            throw e;
          }
        } else {
          record.country = fieldSetFlags()[4] ? this.country : (com.ibm.eventautomation.kafka.schemas.BillingCountry) defaultValue(fields()[4]);
        }
        record.phones = fieldSetFlags()[5] ? this.phones : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BillingAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<BillingAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BillingAddress>
    READER$ = (org.apache.avro.io.DatumReader<BillingAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.number == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.number);
    }

    if (this.street == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.street);
    }

    out.writeString(this.city);

    out.writeString(this.zipcode);

    this.country.customEncode(out);

    if (this.phones == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.phones.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.phones) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.number = null;
      } else {
        this.number = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.street = null;
      } else {
        this.street = in.readString(this.street instanceof Utf8 ? (Utf8)this.street : null);
      }

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.zipcode = in.readString(this.zipcode instanceof Utf8 ? (Utf8)this.zipcode : null);

      if (this.country == null) {
        this.country = new com.ibm.eventautomation.kafka.schemas.BillingCountry();
      }
      this.country.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.phones = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.phones;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("phones").schema().getTypes().get(1));
          this.phones = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.number = null;
          } else {
            this.number = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.street = null;
          } else {
            this.street = in.readString(this.street instanceof Utf8 ? (Utf8)this.street : null);
          }
          break;

        case 2:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 3:
          this.zipcode = in.readString(this.zipcode instanceof Utf8 ? (Utf8)this.zipcode : null);
          break;

        case 4:
          if (this.country == null) {
            this.country = new com.ibm.eventautomation.kafka.schemas.BillingCountry();
          }
          this.country.customDecode(in);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.phones = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.phones;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("phones").schema().getTypes().get(1));
              this.phones = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










