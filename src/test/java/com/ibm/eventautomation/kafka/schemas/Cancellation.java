/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.eventautomation.kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cancellation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2435021021944484539L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cancellation\",\"namespace\":\"com.ibm.eventautomation.kafka.schemas\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"id for the cancellation request\"},{\"name\":\"orderid\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"id of the order that was cancelled\"},{\"name\":\"canceltime\",\"type\":\"string\",\"doc\":\"time that the order was cancelled\"},{\"name\":\"reason\",\"type\":\"string\",\"doc\":\"reason given for the cancellation\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<Cancellation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cancellation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cancellation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cancellation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cancellation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cancellation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cancellation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cancellation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cancellation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** id for the cancellation request */
  private java.util.UUID id;
  /** id of the order that was cancelled */
  private java.util.UUID orderid;
  /** time that the order was cancelled */
  private java.lang.CharSequence canceltime;
  /** reason given for the cancellation */
  private java.lang.CharSequence reason;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cancellation() {}

  /**
   * All-args constructor.
   * @param id id for the cancellation request
   * @param orderid id of the order that was cancelled
   * @param canceltime time that the order was cancelled
   * @param reason reason given for the cancellation
   */
  public Cancellation(java.util.UUID id, java.util.UUID orderid, java.lang.CharSequence canceltime, java.lang.CharSequence reason) {
    this.id = id;
    this.orderid = orderid;
    this.canceltime = canceltime;
    this.reason = reason;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return orderid;
    case 2: return canceltime;
    case 3: return reason;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: orderid = (java.util.UUID)value$; break;
    case 2: canceltime = (java.lang.CharSequence)value$; break;
    case 3: reason = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return id for the cancellation request
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * id for the cancellation request
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'orderid' field.
   * @return id of the order that was cancelled
   */
  public java.util.UUID getOrderid() {
    return orderid;
  }


  /**
   * Sets the value of the 'orderid' field.
   * id of the order that was cancelled
   * @param value the value to set.
   */
  public void setOrderid(java.util.UUID value) {
    this.orderid = value;
  }

  /**
   * Gets the value of the 'canceltime' field.
   * @return time that the order was cancelled
   */
  public java.lang.CharSequence getCanceltime() {
    return canceltime;
  }


  /**
   * Sets the value of the 'canceltime' field.
   * time that the order was cancelled
   * @param value the value to set.
   */
  public void setCanceltime(java.lang.CharSequence value) {
    this.canceltime = value;
  }

  /**
   * Gets the value of the 'reason' field.
   * @return reason given for the cancellation
   */
  public java.lang.CharSequence getReason() {
    return reason;
  }


  /**
   * Sets the value of the 'reason' field.
   * reason given for the cancellation
   * @param value the value to set.
   */
  public void setReason(java.lang.CharSequence value) {
    this.reason = value;
  }

  /**
   * Creates a new Cancellation RecordBuilder.
   * @return A new Cancellation RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.Cancellation.Builder newBuilder() {
    return new com.ibm.eventautomation.kafka.schemas.Cancellation.Builder();
  }

  /**
   * Creates a new Cancellation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cancellation RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.Cancellation.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.Cancellation.Builder other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.Cancellation.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.Cancellation.Builder(other);
    }
  }

  /**
   * Creates a new Cancellation RecordBuilder by copying an existing Cancellation instance.
   * @param other The existing instance to copy.
   * @return A new Cancellation RecordBuilder
   */
  public static com.ibm.eventautomation.kafka.schemas.Cancellation.Builder newBuilder(com.ibm.eventautomation.kafka.schemas.Cancellation other) {
    if (other == null) {
      return new com.ibm.eventautomation.kafka.schemas.Cancellation.Builder();
    } else {
      return new com.ibm.eventautomation.kafka.schemas.Cancellation.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cancellation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cancellation>
    implements org.apache.avro.data.RecordBuilder<Cancellation> {

    /** id for the cancellation request */
    private java.util.UUID id;
    /** id of the order that was cancelled */
    private java.util.UUID orderid;
    /** time that the order was cancelled */
    private java.lang.CharSequence canceltime;
    /** reason given for the cancellation */
    private java.lang.CharSequence reason;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.Cancellation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.canceltime)) {
        this.canceltime = data().deepCopy(fields()[2].schema(), other.canceltime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.reason)) {
        this.reason = data().deepCopy(fields()[3].schema(), other.reason);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Cancellation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ibm.eventautomation.kafka.schemas.Cancellation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderid)) {
        this.orderid = data().deepCopy(fields()[1].schema(), other.orderid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.canceltime)) {
        this.canceltime = data().deepCopy(fields()[2].schema(), other.canceltime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.reason)) {
        this.reason = data().deepCopy(fields()[3].schema(), other.reason);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * id for the cancellation request
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * id for the cancellation request
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * id for the cancellation request
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * id for the cancellation request
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderid' field.
      * id of the order that was cancelled
      * @return The value.
      */
    public java.util.UUID getOrderid() {
      return orderid;
    }


    /**
      * Sets the value of the 'orderid' field.
      * id of the order that was cancelled
      * @param value The value of 'orderid'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder setOrderid(java.util.UUID value) {
      validate(fields()[1], value);
      this.orderid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderid' field has been set.
      * id of the order that was cancelled
      * @return True if the 'orderid' field has been set, false otherwise.
      */
    public boolean hasOrderid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderid' field.
      * id of the order that was cancelled
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder clearOrderid() {
      orderid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'canceltime' field.
      * time that the order was cancelled
      * @return The value.
      */
    public java.lang.CharSequence getCanceltime() {
      return canceltime;
    }


    /**
      * Sets the value of the 'canceltime' field.
      * time that the order was cancelled
      * @param value The value of 'canceltime'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder setCanceltime(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.canceltime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'canceltime' field has been set.
      * time that the order was cancelled
      * @return True if the 'canceltime' field has been set, false otherwise.
      */
    public boolean hasCanceltime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'canceltime' field.
      * time that the order was cancelled
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder clearCanceltime() {
      canceltime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'reason' field.
      * reason given for the cancellation
      * @return The value.
      */
    public java.lang.CharSequence getReason() {
      return reason;
    }


    /**
      * Sets the value of the 'reason' field.
      * reason given for the cancellation
      * @param value The value of 'reason'.
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder setReason(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.reason = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'reason' field has been set.
      * reason given for the cancellation
      * @return True if the 'reason' field has been set, false otherwise.
      */
    public boolean hasReason() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'reason' field.
      * reason given for the cancellation
      * @return This builder.
      */
    public com.ibm.eventautomation.kafka.schemas.Cancellation.Builder clearReason() {
      reason = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cancellation build() {
      try {
        Cancellation record = new Cancellation();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.orderid = fieldSetFlags()[1] ? this.orderid : (java.util.UUID) defaultValue(fields()[1]);
        record.canceltime = fieldSetFlags()[2] ? this.canceltime : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.reason = fieldSetFlags()[3] ? this.reason : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cancellation>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cancellation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cancellation>
    READER$ = (org.apache.avro.io.DatumReader<Cancellation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










